import os
import sys
import logging
import asyncio
import requests
from requests.exceptions import Timeout
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.constants import ChatAction
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    ConversationHandler,
    filters,
)
from dotenv import load_dotenv
from bs4 import BeautifulSoup

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
DEEPSEEK_API_KEY = os.getenv('DEEPSEEK_API_KEY')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
CHOOSING, ANALYZE_URL, CHATTING = range(3)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    reply_keyboard = [
        [
            KeyboardButton('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å URL'),
            KeyboardButton('üí¨ –ü–æ–±–æ–ª—Ç–∞—Ç—å')
        ]
    ]

    await update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ URL –∏ –±–µ—Å–µ–¥.\n\n'
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    )
    return CHOOSING

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å URL"
async def analyze_url_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ URL –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.')
    return ANALYZE_URL

# –û–±—Ä–∞–±–æ—Ç–∫–∞ URL –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def analyze_url_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    url = update.message.text

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–µ—Å–æ—á–Ω—ã–º–∏ —á–∞—Å–∞–º–∏
    waiting_message = await update.message.reply_text('‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç –∞–Ω–∞–ª–∏–∑ URL...')

    try:
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ URL
        content = await asyncio.get_event_loop().run_in_executor(None, extract_content_from_url, url)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ DeepSeek API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        summary = await asyncio.get_event_loop().run_in_executor(None, analyze_content_with_deepseek, content)

        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–µ—Å–æ—á–Ω—ã–º–∏ —á–∞—Å–∞–º–∏
        await waiting_message.delete()

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_text('–ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n\n' + summary)
    except Timeout:
        await waiting_message.delete()
        await update.message.reply_text('–ú–æ–¥–µ–ª—å —Å–µ–π—á–∞—Å –æ—á–µ–Ω—å –∑–∞–Ω—è—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ URL: {e}')
        await waiting_message.delete()
        await update.message.reply_text(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ URL. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL.- {e}')

    # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –¥–µ–π—Å—Ç–≤–∏—è
    return await start(update, context)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–±–æ–ª—Ç–∞—Ç—å"
async def start_chatting(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        '–î–∞–≤–∞–π—Ç–µ –ø–æ–±–æ–ª—Ç–∞–µ–º! –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å.\n\n'
        '–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ –±–µ—Å–µ–¥—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /exit –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–≤—ã—Ö–æ–¥".'
    )
    return CHATTING

# –û–±—ã—á–Ω—ã–π –¥–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ CHATTING
async def chat_with_user(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_message = update.message.text

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–≤–æ–¥ —Å–ª–æ–≤–∞ "–≤—ã—Ö–æ–¥"
    if user_message.lower() == '–≤—ã—Ö–æ–¥':
        return await exit_chatting(update, context)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–µ—Å–æ—á–Ω—ã–º–∏ —á–∞—Å–∞–º–∏
    waiting_message = await update.message.reply_text('‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞...')

    try:
        # –û–±—Ä–∞—â–µ–Ω–∏–µ –∫ DeepSeek API –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ —Å –º–æ–¥–µ–ª—å—é 'deepseek-chat'
        response_text = await asyncio.get_event_loop().run_in_executor(None, chat_with_deepseek, user_message)

        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–µ—Å–æ—á–Ω—ã–º–∏ —á–∞—Å–∞–º–∏
        await waiting_message.delete()

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_text(response_text)
    except Timeout:
        await waiting_message.delete()
        await update.message.reply_text('–ú–æ–¥–µ–ª—å —Å–µ–π—á–∞—Å –æ—á–µ–Ω—å –∑–∞–Ω—è—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—â–µ–Ω–∏–∏ —Å DeepSeek: {e}')
        await waiting_message.delete()
        await update.message.reply_text(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ {e}.')

    return CHATTING  # –û—Å—Ç–∞—ë–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ CHATTING –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞

# –ö–æ–º–∞–Ω–¥–∞ /exit –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è CHATTING
async def exit_chatting(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –±–µ—Å–µ–¥—ã.')
    return await start(update, context)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
async def unknown_message(update: Update, context: ContextTypes.DEFAULT_TYPE): 
    await update.message.reply_text('–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...')

    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
    os.execv(sys.executable, ['python'] + sys.argv)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã
def extract_content_from_url(url):
    headers = {'User-Agent': 'Mozilla/5.0'}
    try:
        response = requests.get(url, headers=headers, timeout=30)
    except Timeout:
        raise Timeout("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ URL.")
    response.raise_for_status()
    soup = BeautifulSoup(response.content, 'html.parser')

    # –£–¥–∞–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç—ã –∏ —Å—Ç–∏–ª–∏
    for script in soup(['script', 'style']):
        script.decompose()

    paragraphs = soup.find_all('p')
    text = '\n'.join([p.get_text() for p in paragraphs])
    
    return text

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ DeepSeek API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
def analyze_content_with_deepseek(content):
    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    max_content_length = 1500  # –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ —Å–≤–æ–µ–º—É —É—Å–º–æ—Ç—Ä–µ–Ω–∏—é
    if len(content) > max_content_length:
        content = content[:max_content_length] + "..."

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—Ä–∞—Ç–∫–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
    prompt = f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –∏ –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞:\n\n{content}"

    # –ö–æ–¥ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ DeepSeek API
    url = "https://api.deepseek.com/chat/completions"
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {DEEPSEEK_API_KEY}"
    }

    data = {
        "model": "deepseek-reasoner",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å 'deepseek-reasoner' –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ URL
        "messages": [
            {"role": "system", "content": "You are a professional assistant who summarizes texts in russian"},
            {"role": "user", "content": prompt}
        ],
        "stream": False
    }

    try:
        response = requests.post(url, headers=headers, json=data, timeout=30)
    except Timeout:
        raise Timeout("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏ –æ–±—â–µ–Ω–∏–∏ —Å DeepSeek API.")
    response.raise_for_status()
    result = response.json()

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    summary = result['choices'][0]['message']['content']
    return summary

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ —Å DeepSeek API
def chat_with_deepseek(user_message):
    # –ö–æ–¥ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ DeepSeek API
    url = "https://api.deepseek.com/chat/completions"
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {DEEPSEEK_API_KEY}"
    }

    data = {
        "model": "deepseek-chat",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å 'deepseek-chat' –¥–ª—è –æ–±—â–µ–Ω–∏—è
        "messages": [
            {"role": "system", "content": "You are a helpful assistant."},
            {"role": "user", "content": user_message}
        ],
        "stream": False
    }

    try:
        response = requests.post(url, headers=headers, json=data, timeout=30)
    except Timeout:
        raise Timeout("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏ –æ–±—â–µ–Ω–∏–∏ —Å DeepSeek API.")
    response.raise_for_status()
    result = response.json()

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    reply = result['choices'][0]['message']['content']
    return reply

def main():
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            CHOOSING: [
                MessageHandler(filters.Regex('^üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å URL$'), analyze_url_start),
                MessageHandler(filters.Regex('^üí¨ –ü–æ–±–æ–ª—Ç–∞—Ç—å$'), start_chatting),
            ],
            ANALYZE_URL: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, analyze_url_received)
            ],
            CHATTING: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, chat_with_user),
                CommandHandler('exit', exit_chatting)
            ]
        },
        fallbacks=[CommandHandler('exit', exit_chatting)],
    )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤–Ω–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
    application.add_handler(conv_handler)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, unknown_message))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()